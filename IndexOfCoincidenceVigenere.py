def calculate_ic(text):
    frequencies = [0] * 26
    text_length = len(text)

    for char in text:
        if char.isalpha():
            char_index = ord(char) - ord('A')
            frequencies[char_index] += 1

    ic_sum = 0
    for freq in frequencies:
        ic_sum += (freq * (freq - 1))

    ic = ic_sum / (text_length * (text_length - 1))
    return ic

ciphertext = "NONZTNJNMAWUJCAMLYBNBYAYTWXZTJIEGFHRZDBQDVUWTESVUUTFEQTOFQWUFRXGPVOTAQSXZAUODRGGTXIGULXPIFUAGOEOFYHZDGIEVXOHESFASRTSTUDVOSNSAEDAGPYZPUGFAVOIMIAFTUGPALTEOQNQBYLMWRFKVXOIFRPMSVOSXMSBOAEXTUFYXMREPUGPAAELNYPFVGTDAAELBZSRFDVMKRHRXIOABBVPESHTAQHREGXETUFAGUMNMSAMTREMHEEFCEVMUFFHXFOYETTXEFBNWPIQOOPARXCUMEOZFOYFHRNBXXIRWEWUNFVGTDCNODRYOHOTTUNNODMTECJGLTAQUOTDGHFVXDYUBRWFOCFRLGAQFTAQMGIAMFHRSEPMSAPSNOHCMAVQTUFIKYOFUFTUTUGUEPIFDIIXEFXEKQTUFTPACNSTAARFFSUAXRSAGPAODDXRGPMOOQRGIELQTJPHTPGEFAMPISGIVGLGZIGFHVOKBZGNOYMTIAHONFFBSTAQMFFLOQSOVTAMVVOGHZCRBCVQPGFDMTECJGLMSGIEBDTRBCAQRFUHXKAOTOKNEQFVXDYGIIGSTUBTMTELXEKQTBMDTZDCBSLQDVUOGFOGIEHFHRSAGUMNMSUKSVNPEQAEHUFQNGTTAQYJFRXGNSBIEUNTJNMTEVSAMFEAEAGOENUTAQAODDXRGFFCKQTZFEMUNTTIGFHRCAKZAAELXPTUFSBZGVOGHRBRBSMEOSFNZXAAEWBFHJIIVTTUFMXQTVOGLMLJBYLQNQFDGAWNTIMFUEOEWAUGUHXDEOFLEUOAXALMCUJEOQDZVCAQAEMIXDAAEMHDERBSBXYGIAGMNLPNXTAQFXIQCGFDBZPNTTRQAETMKVOAFSTXTUPUZTAUBRWYAFUEKTAQCEXZAPBPTNLRGAKYEECUMAFYBTXTEUBDYMLYFNHZEIJLWMYFIEAMDOFCHYEZVCAMBPEEYSDVTHXMRGFNXPASUEKXOFJNZYOAFYBZAYBWLGIGBNWTAQUADQNGPDKUNXJNZYOEFTAMNJBSZAOQGOKTIZGOKIHBMEWMYFBTTFIZFHXIOHMDEAUAHEBZHVTWBZDFPRVTAVSIGFHRLIMOHRORXMDVOGMTEAFWLBACFRLPRVOKBZGNODHOCNTIHZAYMYYQEQJNZYOFFSHZCEVSMEOSCRXMDFPADQDVOBXQRUJSFQNJFRXUDYFAGPDVTHHZEFUTAQFVFLWEWRSEYGLYPFPQEQTTAQBHJLWUNTTWTZTRERHAFVOGMTEUFDZQSJFRXZETMEVFEQBNWFHRBNBYAYTWXDEHODXDFREJNZEPBMXMNQUHXTALXALMLZPSMDENEYYARPVTMUNTPNFUDFVMFQRFFVXIHVDHTNCQFFZIAFBSTFUEEARYRWPNXEWROTBZTBXIEXIAHDHZAAEGHFSBERNZKNUTAQRRELBANGIAMTEQJDGATPPMXNAPLTBXLZJDWMYBOSNZDNZTAQMROHTPMVMKXPTUFCHISVOTAQENSLRYOEOIGSAAETAQNUBDZANRPUMDAOCIMUNTXIMTOHUBHFHRSIGSTBGEXPTUFAGUMNMSPTEANRCANRTGHFBNDKAQIZNEWUAGFLRIEAUTHELRFPHZTUFDKMWVOGKAOZTOYMWVUHMTEAFWLAFGIEPARYEOOQRUJSYMCRTOMTAGXHXZEIFNBZGPBMXFHRBNBYAYTWXDEFUIEXUAGEWMTYBSMFHRZCHGLQTTTZDVUNHXOAHEKANRPFMTEPPWLNRBLEBZTUFDHARBGTAQSGPRXEHREWBFHUFRAARABNWMLYUHXMNVNAEEBRHAGFOUFLIFHRNSXXVRTFKAMGIEUUNFJTPMSWVSMFHROTAMTZSJHZEFXODQUCUHXZEKUMHYEAUHXMNQIILROHSMXZWRSEBZTUFSMARRTHXPWVUHPTICTIGFHRJRAMNQTLTEHVOGHGTVOAEXDVSEVFIBOSMTIFXALYOEFTAMNGIEAGNTSY"

# Calculate IC values for different key lengths
for key_length in range(1, len(ciphertext)):
    grouped_text = [''] * key_length

    for i, char in enumerate(ciphertext):
        group_index = i % key_length
        grouped_text[group_index] += char

    ic_values = [calculate_ic(group) for group in grouped_text]
    average_ic = sum(ic_values) / key_length

    print(f"Key Length: {key_length}, Average IC: {average_ic}")

    if abs(average_ic - 0.065) < 0.005:
        print(f"Potential Key Length found: {key_length}")
        break
